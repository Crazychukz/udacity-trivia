{"ast":null,"code":"var _jsxFileName = \"/Users/crazychukz/Desktop/DEV/FSND/projects/02_trivia_api/starter/frontend/src/components/QuizView.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../stylesheets/QuizView.css';\nconst questionsPerPlay = 5;\nconst hostURL = 'http://127.0.0.1:5000';\n\nclass QuizView extends Component {\n  constructor(props) {\n    super();\n\n    this.selectCategory = ({\n      type,\n      id = 0\n    }) => {\n      this.setState({\n        quizCategory: {\n          type,\n          id\n        }\n      }, this.getNextQuestion);\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.getNextQuestion = () => {\n      const previousQuestions = [...this.state.previousQuestions];\n\n      if (this.state.currentQuestion.id) {\n        previousQuestions.push(this.state.currentQuestion.id);\n      }\n\n      $.ajax({\n        url: hostURL + '/quizzes',\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          previous_questions: previousQuestions,\n          quiz_category: this.state.quizCategory\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            showAnswer: false,\n            previousQuestions: previousQuestions,\n            currentQuestion: result.question,\n            guess: '',\n            forceEnd: result.question ? false : true\n          }); // Check if game has ended and user is not anonymous, then update player's score\n\n          if (this.state.forceEnd && this.state.player > 0) {\n            $.ajax({\n              url: hostURL + \"/players/\".concat(this.state.player, \"/score\"),\n              type: \"POST\",\n              dataType: 'json',\n              contentType: 'application/json',\n              data: JSON.stringify({\n                score: this.state.numCorrect\n              }),\n              xhrFields: {\n                withCredentials: true\n              },\n              crossDomain: true,\n              success: result => {},\n              error: error => {}\n            });\n          }\n\n          return;\n        },\n        error: error => {\n          alert('Unable to load question. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.submitGuess = event => {\n      event.preventDefault();\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      let evaluate = this.evaluateAnswer();\n      this.setState({\n        numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n        showAnswer: true\n      });\n    };\n\n    this.restartGame = () => {\n      this.setState({\n        quizCategory: null,\n        previousQuestions: [],\n        showAnswer: false,\n        numCorrect: 0,\n        currentQuestion: {},\n        guess: '',\n        forceEnd: false\n      });\n    };\n\n    this.evaluateAnswer = () => {\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n      return answerArray.includes(formatGuess);\n    };\n\n    this.state = {\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      categories: [],\n      players: [],\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false,\n      player: 0\n    };\n  }\n\n  componentDidMount() {\n    $.ajax({\n      url: hostURL + \"/categories\",\n      type: \"GET\",\n      success: result => {\n        this.setState({\n          categories: result.categories\n        });\n        return;\n      },\n      error: error => {\n        alert('Unable to load categories. Please try your request again');\n        return;\n      }\n    });\n    $.ajax({\n      url: hostURL + \"/players\",\n      type: \"GET\",\n      success: result => {\n        this.setState({\n          players: result.players\n        });\n      },\n      error: error => {\n        alert('Unable to load players. Please try your request again');\n      }\n    });\n  }\n\n  renderPrePlay() {\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"play-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Choose A Player\"), React.createElement(\"div\", {\n      className: \"spaced\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      className: \"select\",\n      name: \"category\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      key: 0,\n      value: 0,\n      onChange: this.state.player = 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Anonymous\"), this.state.players.map(player => {\n      return React.createElement(\"option\", {\n        key: player.id,\n        value: player.id,\n        onChange: this.state.player = player.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, player.username);\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"play-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Choose Category\"), React.createElement(\"div\", {\n      className: \"category-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"play-category\",\n      onClick: this.selectCategory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"ALL\"), this.state.categories.map(cat => {\n      return React.createElement(\"div\", {\n        key: cat.id,\n        value: cat.id,\n        className: \"play-category\",\n        onClick: () => this.selectCategory({\n          type: cat.type,\n          id: cat.id\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"category\",\n        src: \"\".concat(cat.type, \".svg\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }), cat.type);\n    })));\n  }\n\n  renderFinalScore() {\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"final-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \" Your Final Score is \", this.state.numCorrect), React.createElement(\"button\", {\n      className: \"play button\",\n      onClick: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \" Play Again?\"));\n  }\n\n  renderCorrectAnswer() {\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n    let evaluate = this.evaluateAnswer();\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, this.state.currentQuestion.question), React.createElement(\"div\", {\n      className: \"\".concat(evaluate ? 'correct' : 'wrong'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, evaluate ? \"You were correct!\" : \"You were incorrect\"), React.createElement(\"div\", {\n      className: \"quiz-answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, this.state.currentQuestion.answer), React.createElement(\"button\", {\n      className: \"play button\",\n      onClick: this.getNextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, \" Next Question\"))));\n  }\n\n  renderPlay() {\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd ? this.renderFinalScore() : this.state.showAnswer ? this.renderCorrectAnswer() : React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, this.state.currentQuestion.question), React.createElement(\"form\", {\n      onSubmit: this.submitGuess,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"guess\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"submit-guess button play\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Submit Answer\")))));\n  }\n\n  render() {\n    return this.state.quizCategory ? this.renderPlay() : this.renderPrePlay();\n  }\n\n}\n\nexport default QuizView;","map":{"version":3,"sources":["/Users/crazychukz/Desktop/DEV/FSND/projects/02_trivia_api/starter/frontend/src/components/QuizView.js"],"names":["React","Component","$","questionsPerPlay","hostURL","QuizView","constructor","props","selectCategory","type","id","setState","quizCategory","getNextQuestion","handleChange","event","target","name","value","previousQuestions","state","currentQuestion","push","ajax","url","dataType","contentType","data","JSON","stringify","previous_questions","quiz_category","xhrFields","withCredentials","crossDomain","success","result","showAnswer","question","guess","forceEnd","player","score","numCorrect","error","alert","submitGuess","preventDefault","formatGuess","replace","toLowerCase","evaluate","evaluateAnswer","restartGame","answerArray","answer","split","includes","categories","players","componentDidMount","renderPrePlay","map","username","cat","renderFinalScore","renderCorrectAnswer","renderPlay","length","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport $ from 'jquery';\n\nimport '../stylesheets/QuizView.css';\n\nconst questionsPerPlay = 5;\nconst hostURL = 'http://127.0.0.1:5000';\n\nclass QuizView extends Component {\n    constructor(props) {\n        super();\n        this.state = {\n            quizCategory: null,\n            previousQuestions: [],\n            showAnswer: false,\n            categories: [],\n            players: [],\n            numCorrect: 0,\n            currentQuestion: {},\n            guess: '',\n            forceEnd: false,\n            player: 0\n        }\n    }\n\n    componentDidMount() {\n        $.ajax({\n            url: hostURL + `/categories`,\n            type: \"GET\",\n            success: (result) => {\n                this.setState({categories: result.categories});\n                return;\n            },\n            error: (error) => {\n                alert('Unable to load categories. Please try your request again');\n                return;\n            }\n        });\n        $.ajax({\n            url: hostURL + `/players`,\n            type: \"GET\",\n            success: (result) => {\n                this.setState({players: result.players});\n            },\n            error: (error) => {\n                alert('Unable to load players. Please try your request again');\n            }\n        })\n    }\n\n    selectCategory = ({type, id = 0}) => {\n        this.setState({quizCategory: {type, id}}, this.getNextQuestion)\n    };\n\n    handleChange = (event) => {\n        this.setState({[event.target.name]: event.target.value})\n    };\n\n    getNextQuestion = () => {\n        const previousQuestions = [...this.state.previousQuestions];\n        if (this.state.currentQuestion.id) {\n            previousQuestions.push(this.state.currentQuestion.id)\n        }\n\n        $.ajax({\n            url: hostURL + '/quizzes', //TODO: update request URL\n            type: \"POST\",\n            dataType: 'json',\n            contentType: 'application/json',\n            data: JSON.stringify({\n                previous_questions: previousQuestions,\n                quiz_category: this.state.quizCategory\n            }),\n            xhrFields: {\n                withCredentials: true\n            },\n            crossDomain: true,\n            success: (result) => {\n                this.setState({\n                    showAnswer: false,\n                    previousQuestions: previousQuestions,\n                    currentQuestion: result.question,\n                    guess: '',\n                    forceEnd: result.question ? false : true\n                });\n                // Check if game has ended and user is not anonymous, then update player's score\n                if (this.state.forceEnd && this.state.player > 0) {\n                    $.ajax({\n                        url: hostURL + `/players/${this.state.player}/score`,\n                        type: \"POST\",\n                        dataType: 'json',\n                        contentType: 'application/json',\n                        data: JSON.stringify({\n                            score: this.state.numCorrect,\n                        }),\n                        xhrFields: {\n                            withCredentials: true\n                        },\n                        crossDomain: true,\n                        success: (result) => {\n                        },\n                        error: (error) => {\n                        }\n                    })\n                }\n                return;\n            },\n            error: (error) => {\n                alert('Unable to load question. Please try your request again');\n                return;\n            }\n        })\n    };\n\n    submitGuess = (event) => {\n        event.preventDefault();\n        const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n        let evaluate = this.evaluateAnswer();\n        this.setState({\n            numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n            showAnswer: true,\n        })\n    };\n\n    restartGame = () => {\n        this.setState({\n            quizCategory: null,\n            previousQuestions: [],\n            showAnswer: false,\n            numCorrect: 0,\n            currentQuestion: {},\n            guess: '',\n            forceEnd: false\n        })\n    };\n\n    renderPrePlay() {\n        return (\n            <div className=\"quiz-play-holder\">\n                <div className=\"play-text\">Choose A Player</div>\n                <div className=\"spaced\">\n                    <select className=\"select\" name=\"category\" onChange={this.handleChange}>\n                        <option key={0} value={0} onChange={this.state.player = 0}>Anonymous</option>\n                        {this.state.players.map(player => {\n                            return (\n                                <option key={player.id} value={player.id}\n                                        onChange={this.state.player = player.id}>{player.username}</option>\n                            )\n                        })}\n                    </select>\n                </div>\n                <br/>\n                <div className=\"play-text\">Choose Category</div>\n                <div className=\"category-holder\">\n                    <div className=\"play-category\" onClick={this.selectCategory}>ALL</div>\n                    {(this.state.categories).map(cat => {\n                        return (\n                            <div\n                                key={cat.id}\n                                value={cat.id}\n                                className=\"play-category\"\n                                onClick={() => this.selectCategory({type: cat.type, id: cat.id})}>\n                                <img className=\"category\" src={`${cat.type}.svg`}/>\n                                {cat.type}\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        )\n    }\n\n    renderFinalScore() {\n        return (\n            <div className=\"quiz-play-holder\">\n                <div className=\"final-header\"> Your Final Score is {this.state.numCorrect}</div>\n                <button className=\"play button\" onClick={this.restartGame}> Play Again?</button>\n            </div>\n        )\n    }\n\n    evaluateAnswer = () => {\n        const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase()\n        const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n        return answerArray.includes(formatGuess)\n    };\n\n    renderCorrectAnswer() {\n        const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase()\n        let evaluate = this.evaluateAnswer()\n        return (\n            <div className=\"quiz-play-holder\">\n                <div className=\"quiz-body\">\n                    <div>\n                        <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\n                        <div\n                            className={`${evaluate ? 'correct' : 'wrong'}`}>{evaluate ? \"You were correct!\" : \"You were incorrect\"}</div>\n                        <div className=\"quiz-answer\">{this.state.currentQuestion.answer}</div>\n                        <button className=\"play button\" onClick={this.getNextQuestion}> Next Question</button>\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n\n    renderPlay() {\n        return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd\n            ? this.renderFinalScore()\n            : this.state.showAnswer\n                ? this.renderCorrectAnswer()\n                : (\n                    <div className=\"quiz-play-holder\">\n                        <div className=\"quiz-body\">\n                            <div>\n                                <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\n                                <form onSubmit={this.submitGuess}>\n                                    <input type=\"text\" name=\"guess\" onChange={this.handleChange}/>\n                                    <button className=\"submit-guess button play\" type=\"submit\">Submit Answer</button>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                )\n    }\n\n\n    render() {\n        return this.state.quizCategory\n            ? this.renderPlay()\n            : this.renderPrePlay()\n    }\n}\n\nexport default QuizView;\n"]},"metadata":{},"sourceType":"module"}